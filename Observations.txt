b) Briefly explain why the first algorithm is of exponential complexity and the second one is
of linear complexity (more specifically, how the second algorithm resolves some specific
bottleneck(s) of the first algorithm).

As the results shows, we can see that the built-in time for each of the two methods grows differently.
At first (n=5), the multiple recursion seems faster, but as the parameter n grows, the time
increases exponentially. On the other hand, the linear recursion is a lot more stable with
a linear built-in time growth.

For instance, in the multiple recursion, when we observe the built-in growth from n=30 to n=30,
it goes from a 4.774952ms built-in time to a 88.021771ms built-in time. In contrast, the
linear recursion shows a much smaller and constant increase in time, going from 1.299770 ms
at n=25 to 1.426678 ms at n=30.

The reason why the multiple recursion is of exponential complexity is that it makes 3 recursive calls.
This leads to making 3 more calls and so on and so on, which results in a fast increase in the
number of recursive calls as n grows. Since each new value of n results in a tripling of the number of
calls, the time complexity is exponential, O(3^n). The linear recursion is more efficient, since it
only makes one recursive call each time. It doesn't recalculate the same already computed values,
but instead it uses previously computed values to find the next one. The resolved bottleneck is
the fact that it doesn't do any redundant calculations.


|  n   | OddonacciMultiple Time (ms) | OddonacciLinear Time (ms) |
|------|------------------------------|---------------------------|
|  5   |          0.004235            |         0.337812          |
|  10  |          0.022321            |         0.597741          |
|  15  |          0.341961            |         0.789705          |
|  20  |          0.938342            |         0.993090          |
|  25  |          4.774952            |         1.299770          |
|  30  |         88.021771            |         1.426678          |
|  35  |        1515.462525           |         1.285329          |
|  40  |        38372.595284          |         1.449602          |


c) Do any of the previous two algorithms use tail recursion? Why or why not? Explain your answer.
   If your answer is “No” then:
        Can a tail-recursive version of Oddonacci calculator be designed?
               i. If yes; provide the idea of how this can be achieved. Bonus mark will be given if you implement this tail-recursive solution.
               ii. If no, explain clearly why such tail-recursive algorithm is infeasible.

No, since the multiple recursion has a computation (sum) of 3 recursive calls as its last
statement and the linear recursion, a computation. A tail recursion should only be a
recursion call as its last statement without any further computation.

Yes, it's possible to design a tail recursive version. To make it, a helper method should
be used. The tail recursive method would have n as a parameter and would cover the base case of
(n=1 and n=2) that would return 1 (n=3 is covered in the helper method). The last statement
should be a recursive call to the helper method. The helper method has n, a, b, c as
parameters. n is the same as in the tail recursive method. The parameter a is the value
at n-3, b is the value at n-2 and c is the value at n-1. The helper method covers the base
case of n=3, where it would return c, so it doesn't continue infinitely. The helper methods
returns a recursive call to the previous n, since it's reducing each time, so n-1, and a becomes b,
b becomes c and c becomes the sum of a+b+c (same idea as what is done after the recursive
call in the linear recursion), since the Oddonacci principle is to add the 3 previous
values to get the new one.

It should look like this :

OddonacciTail ( let n be an integer)
    IF n=1 OR n=2
        Return 1
    Return  Call to helper recursive method (n,1,1,1)


oddonacciTailHelper(let n be an integer, let a be a long, let b be a long, let c be a long) {
    IF n = 3
        Return c
    Return Recursive Call  (n - 1, b, c, a + b + c)
